/**
 * Type definitions for the ATS Lite application
 * Contains all shared types for API requests/responses, candidates, chat system, and MCP workflow
 */

import type { OpenAI } from 'openai'

// =============================================================================
// API Types
// =============================================================================

/**
 * Standard API request structure for LLM interactions
 */
export interface Request {
  /** Array of chat messages in OpenAI format */
  messages: OpenAIChatMessage[]
  /** The model identifier to use for the request */
  model: string
  /** Whether to stream the response (optional) */
  stream?: boolean
}

/**
 * OpenAI-specific chat completion request
 */
export interface OpenAIChatRequest {
  /** Array of chat messages in OpenAI format */
  messages: OpenAIChatMessage[]
  /** The OpenAI model identifier */
  model: string
}

/**
 * Standard API response structure
 */
export interface Response {
  /** The response message content */
  message: string
}

/**
 * Extended Error interface for API errors with additional context
 */
export interface APIError extends Error {
  /** HTTP status code (optional) */
  status?: number
  /** Error code identifier (optional) */
  code?: string
}

// =============================================================================
// Candidate Types
// =============================================================================

/**
 * Represents a job candidate with all their professional and personal information
 */
export type Candidate = {
  /** Unique identifier for the candidate */
  id: string
  /** Candidate's full name */
  full_name: string
  /** Current job title or desired position */
  title: string
  /** Current location (city, state/country) */
  location: string
  /** Candidate's timezone */
  timezone: string
  /** Total years of professional experience */
  years_experience: number
  /** Array of technical and professional skills */
  skills: string[]
  /** Programming languages or spoken languages */
  languages: string[]
  /** Highest education level achieved */
  education_level: string
  /** Major field of study for their degree */
  degree_major: string
  /** How many weeks until they can start */
  availability_weeks: number
  /** Whether they're open to relocating for work */
  willing_to_relocate: boolean
  /** Work arrangement preference (remote, hybrid, onsite) */
  work_preference: string
  /** Notice period required at current job (in weeks) */
  notice_period_weeks: number
  /** Desired annual salary in USD */
  desired_salary_usd: number
  /** Whether they're open to contract work */
  open_to_contract: boolean
  /** Years of experience working remotely */
  remote_experience_years: number
  /** Current visa/work authorization status */
  visa_status: string
  /** Countries where they have citizenship */
  citizenships: string[]
  /** Professional summary or bio */
  summary: string
  /** Custom tags for categorization */
  tags: string[]
  /** Last time the candidate was active on the platform */
  last_active: string
  /** LinkedIn profile URL */
  linkedin_url: string
}

// =============================================================================
// MCP (Model Control Protocol) Types
// =============================================================================

/**
 * Data structure for the AI's thinking process during candidate evaluation
 */
export interface ThinkingData {
  /** Current phase of the thinking process */
  phase: string
  /** The filtering and ranking plans generated by the AI */
  plan: { filter?: FilterPlan; rank?: RankingPlan } | null
  /** Candidates that passed the filtering criteria */
  filtered: Candidate[]
  /** Final ranked list of candidates */
  ranked: Candidate[]
  /** AI's final response to the user */
  reply: string
}

// =============================================================================
// Chat Types
// =============================================================================

/**
 * Represents a single message in the chat system
 */
export interface ChatMessage {
  /** Unique identifier for the message */
  id: string
  /** The message content */
  text: string
  /** When the message was created */
  timestamp: Date
  /** Who sent the message */
  sender: 'user' | 'assistant' | 'thinking' | 'system'
  /** AI model used to generate the message (if applicable) */
  model?: string
  /** Additional data attached to the message */
  data?: Record<string, unknown> & {
    /** Thinking process data for AI reasoning */
    thinkingData?: ThinkingData
    /** Candidate data for results */
    candidates?: Candidate[]
    /** Message type identifier */
    type?: string
  }
  /** Whether the message is fully processed (for thinking messages) */
  isComplete?: boolean
}

/**
 * Represents a complete chat conversation
 */
export interface Chat {
  /** Unique identifier for the chat */
  id: string
  /** Display title for the chat */
  title: string
  /** All messages in the chat */
  messages: ChatMessage[]
  /** When the chat was created */
  createdAt: Date
  /** When the chat was last updated */
  updatedAt: Date
}

/**
 * Configuration for AI model selection
 */
export interface ModelConfig {
  /** The provider name (e.g., 'openai', 'anthropic') */
  provider: string
  /** The specific model identifier */
  model: string
  /** Human-readable name for the model */
  name: string
}

// =============================================================================
// Store Types
// =============================================================================

/**
 * Zustand store interface for chat state management
 */
export interface ChatStore {
  /** Current input message being typed */
  message: string
  /** All chat conversations */
  chats: Chat[]
  /** ID of the currently active chat */
  currentChatId: string | null
  /** Currently selected AI model */
  selectedModel: ModelConfig

  // Computed getter for current messages (replaces duplicated messages array)
  /** Get messages for the current chat */
  getCurrentMessages: () => ChatMessage[]

  // Input actions
  /** Update the current input message */
  setMessage: (message: string) => void
  /** Set a suggested message as the current input */
  setSuggestion: (suggestion: string) => void

  // Model actions
  /** Change the selected AI model */
  setSelectedModel: (model: ModelConfig) => void

  // Chat actions
  /** Create a new chat and return its ID */
  createNewChat: () => string
  /** Switch to an existing chat */
  switchToChat: (chatId: string) => void
  /** Delete a chat conversation */
  deleteChat: (chatId: string) => void
  /** Add a new message to the current chat */
  addMessage: (message: Omit<ChatMessage, 'id' | 'timestamp'> & { id?: string }) => void
  /** Update the title of a specific chat */
  updateChatTitle: (chatId: string, title: string) => void
  /** Update specific properties of a message */
  updateMessage: (messageId: string, updates: Partial<ChatMessage>) => void
}

// =============================================================================
// Filtering and Ranking Types
// =============================================================================

/**
 * Plan for filtering candidates based on criteria
 */
export type FilterPlan = {
  /** Criteria that candidates must match */
  include?: Partial<Record<keyof Candidate, string | number | boolean>>
  /** Criteria that candidates must NOT match */
  exclude?: Partial<Record<keyof Candidate, string | number | boolean>>
}

/**
 * Plan for ranking/sorting filtered candidates
 */
export type RankingPlan = {
  /** Primary field to sort by */
  primary: keyof Candidate
  /** Additional fields to break ties */
  tie_breakers?: (keyof Candidate)[]
  /** Sort direction (ascending or descending) */
  order?: 'asc' | 'desc'
}

/**
 * Response from the AI's thinking/planning phase
 */
export type ThinkPlanResponse = {
  /** How to filter candidates */
  filter: FilterPlan
  /** How to rank the filtered results */
  rank: RankingPlan
}

// =============================================================================
// Statistics and Results Types
// =============================================================================

/**
 * Statistical summary of candidate data
 */
export type CandidateStats = {
  /** Total number of candidates */
  count: number
  /** Average years of experience */
  avg_experience: number
  /** Most common skills across candidates */
  top_skills: string[]
}

/**
 * Complete result set from MCP workflow processing
 */
export type MCPResult = {
  /** Candidates after filtering */
  filteredCandidates: Candidate[]
  /** Candidates after ranking */
  rankedCandidates: Candidate[]
  /** Top N candidates for display */
  topCandidates: Candidate[]
  /** Statistical summary */
  stats: CandidateStats
  /** AI-generated summary of results */
  summary: string
}

/**
 * Individual step result in the MCP workflow pipeline
 */
export type MCPStepResult =
  | { step: 'think'; data: ThinkPlanResponse }
  | { step: 'filter'; data: Candidate[] }
  | { step: 'rank'; data: Candidate[] }
  | { step: 'speak'; data: string }

/**
 * Current phase of the MCP workflow
 */
export type MCPPhase = 'idle' | 'thinking' | 'filtering' | 'ranking' | 'speaking'

/**
 * State of the MCP workflow
 */
export type MCPState = {
  /** Current phase of the MCP workflow */
  phase: MCPPhase
  /** The filtering and ranking plans generated by the AI */
  plan: { filter?: FilterPlan; rank?: RankingPlan } | null
  /** Candidates that passed the filtering criteria */
  filtered: Candidate[]
  /** Final ranked list of candidates */
  ranked: Candidate[]
  /** AI's final response to the user */
  reply: string
  /** Set the current phase of the MCP workflow */
  setPhase: (phase: MCPPhase) => void
  /** Set the current plan of the MCP workflow */
  setPlan: (plan: { filter?: FilterPlan; rank?: RankingPlan } | null) => void
  /** Set the filtered candidates */
  setFiltered: (c: Candidate[]) => void
  /** Set the ranked candidates */
  setRanked: (c: Candidate[]) => void
  /** Set the AI's final response to the user */
  setReply: (text: string) => void
}

// =============================================================================
// External Library Types
// =============================================================================

/**
 * OpenAI chat message type alias for convenience
 */
export type OpenAIChatMessage = OpenAI.Chat.Completions.ChatCompletionMessageParam
